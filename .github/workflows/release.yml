name: Release Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history including all tags
    
    - name: Check version change
      id: version_check
      run: |
        # Get current version from project.pbxproj
        CURRENT_VERSION=$(grep -m 1 "MARKETING_VERSION" Macontainer.xcodeproj/project.pbxproj | sed 's/.*MARKETING_VERSION = \([^;]*\);.*/\1/' | tr -d ' ')
        
        # Get previous version from last commit
        git checkout HEAD~1 -- Macontainer.xcodeproj/project.pbxproj 2>/dev/null || echo "No previous version"
        PREVIOUS_VERSION=$(grep -m 1 "MARKETING_VERSION" Macontainer.xcodeproj/project.pbxproj 2>/dev/null | sed 's/.*MARKETING_VERSION = \([^;]*\);.*/\1/' | tr -d ' ' || echo "none")
        
        # Restore current project.pbxproj
        git checkout HEAD -- Macontainer.xcodeproj/project.pbxproj
        
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "version_changed=$([ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
        
        echo "Current version: $CURRENT_VERSION"
        echo "Previous version: $PREVIOUS_VERSION"
    
    - name: Build (verification only)
      run: |
        xcodebuild -scheme Macontainer \
                   -configuration Release \
                   build \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO
    
    - name: Archive and Distribute
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        echo "Version changed - creating archive for distribution..."
        
        xcodebuild -scheme Macontainer \
                   -archivePath Macontainer.xcarchive \
                   -configuration Release \
                   archive \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO
    
    - name: Skip archive message
      if: steps.version_check.outputs.version_changed == 'false'
      run: |
        echo "Version unchanged - skipping archive step."
        
    - name: Create Export Options
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>mac-application</string>
            <key>destination</key>
            <string>export</string>
        </dict>
        </plist>
        EOF
        
    - name: Build for Release
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        xcodebuild -project Macontainer.xcodeproj \
                   -scheme Macontainer \
                   -configuration Release \
                   -destination 'platform=macOS' \
                   -archivePath ./build/Macontainer.xcarchive \
                   archive
                   
    - name: Export Archive
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        xcodebuild -exportArchive \
                   -archivePath ./build/Macontainer.xcarchive \
                   -exportPath ./build/export \
                   -exportOptionsPlist ./ExportOptions.plist
        
    - name: Create DMG
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        mkdir -p ./build/dmg
        cp -R ./build/export/Macontainer.app ./build/dmg/
        hdiutil create -volname "Macontainer" -srcfolder ./build/dmg -ov -format UDZO ./build/Macontainer.dmg
        
    - name: Get version from Info.plist
      if: steps.version_check.outputs.version_changed == 'true'
      id: version
      run: |
        VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" ./build/export/Macontainer.app/Contents/Info.plist)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate Changelog
      if: steps.version_check.outputs.version_changed == 'true'
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        CURRENT_VERSION="${{ steps.version.outputs.version }}"
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Generating changelog from $PREVIOUS_TAG to HEAD"
          
          # Get commit messages since the last tag
          COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --no-merges)
          
          # Get commit count
          COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..HEAD --no-merges)
          
          # Create changelog content with variable substitution
          cat > changelog.md << EOL
        ## What's Changed
        
        This release includes ${COMMIT_COUNT} commits since ${PREVIOUS_TAG}:
        
        ${COMMITS}
        
        ## Installation
        1. Download the DMG file below
        2. Open the DMG and drag Macontainer to your Applications folder
        3. Launch Macontainer from Applications
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v${CURRENT_VERSION}
        EOL
        else
          echo "No previous tag found, creating initial release changelog"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          COMMIT_COUNT=$(git rev-list --count HEAD --no-merges)
          
          # Create changelog content with variable substitution
          cat > changelog.md << EOL
        ## What's Changed
        
        This is the initial release of Macontainer with ${COMMIT_COUNT} commits:
        
        ${COMMITS}
        
        ## Installation
        1. Download the DMG file below
        2. Open the DMG and drag Macontainer to your Applications folder
        3. Launch Macontainer from Applications
        EOL
        fi
        
        # Save changelog content to output
        {
          echo 'changelog<<EOF'
          cat changelog.md
          echo 'EOF'
        } >> $GITHUB_OUTPUT
        
        echo "Generated changelog:"
        cat changelog.md
        
    - name: Create Release
      if: steps.version_check.outputs.version_changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Macontainer v${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          ./build/Macontainer.dmg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Build Artifacts
      if: steps.version_check.outputs.version_changed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: macontainer-build
        path: |
          ./build/export/Macontainer.app
          ./build/Macontainer.dmg
        retention-days: 30
